// Source : http://122.139.62.222:88/JudgeOnline/problem.php?id=1142
// Date   : 2019-02-27

/**
  递推 数的划分问题三
题目描述
把正整数N分解成M个正整数的和，M个加数相同但顺序不同认为是相同的方案，要求总方案数。
如3=1+2跟3=2+1是两个相同的方案。
输入
第一行输入两个整数N,M(1<=M<=N<=50)。

输出
输出一个整数表示方案数。
样例输入
5 3
样例输出
2
*/

/*
该题与 数的划分问题二 的区别在于加数相同但顺序不同认为是相同的方案，要
解决这个问题只要在生成加数时保证后面的加数不小于前一个加数即可
状态：dp[i][j]表示把i分解成j个非递减正整数的和的方案数
分析第一个加数，分以下两种情况：
    1）第一个加数取1：剩下的问题是把i-1分解成j-1个非递减正整数的和的方案数即dp[i-1][j-1]
    2）第一个加数不取1：意味着j个加数全部大于1，问题变成把i分解成j个至少取2的非递减正整数
       的和，把每个加数减一后，就等价于把i-j分解成j个非递减正整数的和，即dp[i-j][j]
递推关系式：
              1                         if j=1
    dp[i][j]= 0                         if i<j
              dp[i-1][j-1]+dp[i-j][j]   if j>1 && i>=j

**/

#include<iostream>
using namespace std;
int n,m,i,j;
#define N 51
long long dp[N][N];

long long func()
{
    for(i=0;i<N;++i) dp[i][1]=1;
    for(i=1;i<N;++i)
        for(j=1;j<=i;++j)
            dp[i][j] = dp[i-1][j-1] + dp[i-j][j];
}

int main()
{
    func();
    cin>>n>>m;
    cout<<dp[n][m]<<endl;
	return 0;
}

