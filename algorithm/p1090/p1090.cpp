// Source : https://www.luogu.org/problemnew/show/P1090
// Date   : 2019-04-09

/**
    贪心 合并果子
题目描述
在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。
每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1次合并之后，
就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。
因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1，并且已知果子的种类
数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。
例如有 3 种果子，数目依次为 1，2 ，9 。可以先将 1、2 堆合并，新堆数目为3，耗费体力为3 。
接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 1212 ，耗费体力为 12 。所以多多总共耗费体力3+12=15 。
可以证明 15 为最小的体力耗费值。

输入输出格式
输入格式：
共两行。
第一行是一个整数 n(1=<n<=10000)，表示果子的种类数。
第二行包含 n 个整数，用空格分隔，第 i个整数 ai(1=<ai<=20000)ai是第 i 种果子的数目。

输出格式：
一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^{31}.

输入输出样例
输入样例#1：
3
1 2 9
输出样例#1：
15
*/

/**
根据题意，每次从所有果子里选择数目最少的两类进行合并即可得到最低体力耗费值，
利用stl中的优先级队列，由于priority_queue默认是大顶堆，所以每次压入种类数的负值，
转化为小顶堆，每次从堆中弹出两个元素进行合并，相加后再压入堆中，当堆中只有一个元素时合并完成
*/

#include <iostream>
#include<queue>
using namespace std;
int n,x,ans=0;
priority_queue<int> p;

int main()
{
    cin>>n;
    while(n--){
        cin>>x;
        p.push(-x);
    }
    while(p.size()>1){
        int a=p.top(); p.pop();
        int b=p.top(); p.pop();
        p.push(a+b);
        ans +=-(a+b);
    }
    cout <<ans<< endl;
    return 0;
}
